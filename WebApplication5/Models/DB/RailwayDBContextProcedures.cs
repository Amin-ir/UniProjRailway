// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApplication5.Models.DB;

namespace WebApplication5.Models.DB
{
    public partial class RailwayDBContext
    {
        private IRailwayDBContextProcedures _procedures;

        public virtual IRailwayDBContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new RailwayDBContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IRailwayDBContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CitySearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<MEALTRAVEL_SEARCHResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<StationSearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TICKETSEARCHResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TrainSearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TravelSearchResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TRAVELSTATION_MODResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UsersSearchResult>().HasNoKey().ToView(null);
        }
    }

    public partial class RailwayDBContextProcedures : IRailwayDBContextProcedures
    {
        private readonly RailwayDBContext _context;

        public RailwayDBContextProcedures(RailwayDBContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CitySearchResult>> CitySearchAsync(int? PID, string PNAME, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PID",
                    Value = PID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PNAME",
                    Size = 25,
                    Value = PNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CitySearchResult>("EXEC @returnValue = [dbo].[CitySearch] @PID, @PNAME", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MEALTRAVEL_SEARCHResult>> MEALTRAVEL_SEARCHAsync(int? MID, string M_NAME, int? TID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MID",
                    Value = MID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "M_NAME",
                    Size = 20,
                    Value = M_NAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TID",
                    Value = TID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MEALTRAVEL_SEARCHResult>("EXEC @returnValue = [dbo].[MEALTRAVEL_SEARCH] @MID, @M_NAME, @TID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<StationSearchResult>> StationSearchAsync(int? pid, string pname, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pid",
                    Value = pid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pname",
                    Size = 25,
                    Value = pname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<StationSearchResult>("EXEC @returnValue = [dbo].[StationSearch] @pid, @pname", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TICKETSEARCHResult>> TICKETSEARCHAsync(int? PID, string PSX, string PFNAME, string PLNAME, string PHONE, int? PWAGON, int? PCOUP, int? PSEAT, bool? PMEAL, DateTime? PSTARTTIME, DateTime? PARRIVALTIME, string STARTCITY, string DESTCITY, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PID",
                    Value = PID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PSX",
                    Size = 5,
                    Value = PSX ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PFNAME",
                    Size = 20,
                    Value = PFNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PLNAME",
                    Size = 20,
                    Value = PLNAME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PHONE",
                    Size = 13,
                    Value = PHONE ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PWAGON",
                    Value = PWAGON ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PCOUP",
                    Value = PCOUP ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PSEAT",
                    Value = PSEAT ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PMEAL",
                    Value = PMEAL ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "PSTARTTIME",
                    Value = PSTARTTIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PARRIVALTIME",
                    Value = PARRIVALTIME ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "STARTCITY",
                    Size = 20,
                    Value = STARTCITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DESTCITY",
                    Size = 20,
                    Value = DESTCITY ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TICKETSEARCHResult>("EXEC @returnValue = [dbo].[TICKETSEARCH] @PID, @PSX, @PFNAME, @PLNAME, @PHONE, @PWAGON, @PCOUP, @PSEAT, @PMEAL, @PSTARTTIME, @PARRIVALTIME, @STARTCITY, @DESTCITY", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TrainSearchResult>> TrainSearchAsync(int? P_train_id, int? P_train_degree, int? P_coupe_capacity, int? p_coup_in_wagon, int? P_numof_wagon, int? P_org_id, string P_org_name, int? P_model_id, string P_model_name, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "P_train_id",
                    Value = P_train_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_train_degree",
                    Value = P_train_degree ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_coupe_capacity",
                    Value = P_coupe_capacity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_coup_in_wagon",
                    Value = p_coup_in_wagon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_numof_wagon",
                    Value = P_numof_wagon ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_org_id",
                    Value = P_org_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_org_name",
                    Size = 20,
                    Value = P_org_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "P_model_id",
                    Value = P_model_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "P_model_name",
                    Size = 15,
                    Value = P_model_name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TrainSearchResult>("EXEC @returnValue = [dbo].[TrainSearch] @P_train_id, @P_train_degree, @P_coupe_capacity, @p_coup_in_wagon, @P_numof_wagon, @P_org_id, @P_org_name, @P_model_id, @P_model_name", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TravelSearchResult>> TravelSearchAsync(int? pid, string pStartName, int? pStartId, string pDestName, int? pDestID, DateTime? pstartDate, DateTime? parrival, int? ptrainID, bool? twoSided, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "pid",
                    Value = pid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pStartName",
                    Size = 25,
                    Value = pStartName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pStartId",
                    Value = pStartId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pDestName",
                    Size = 25,
                    Value = pDestName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pDestID",
                    Value = pDestID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pstartDate",
                    Value = pstartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "parrival",
                    Value = parrival ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "ptrainID",
                    Value = ptrainID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "twoSided",
                    Value = twoSided ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TravelSearchResult>("EXEC @returnValue = [dbo].[TravelSearch] @pid, @pStartName, @pStartId, @pDestName, @pDestID, @pstartDate, @parrival, @ptrainID, @twoSided", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TRAVELSTATION_MODResult>> TRAVELSTATION_MODAsync(int? SID, string SNID, int? TID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SID",
                    Value = SID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SNID",
                    Size = 30,
                    Value = SNID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TID",
                    Value = TID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TRAVELSTATION_MODResult>("EXEC @returnValue = [dbo].[TRAVELSTATION_MOD] @SID, @SNID, @TID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UsersSearchResult>> UsersSearchAsync(int? p_id, DateTime? p_regDate, string p_fname, string p_lname, string p_sx, DateTime? p_birth, string p_phone, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "p_id",
                    Value = p_id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "p_regDate",
                    Value = p_regDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "p_fname",
                    Size = 15,
                    Value = p_fname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_lname",
                    Size = 25,
                    Value = p_lname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_sx",
                    Size = -1,
                    Value = p_sx ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "p_birth",
                    Value = p_birth ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "p_phone",
                    Size = 13,
                    Value = p_phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UsersSearchResult>("EXEC @returnValue = [dbo].[UsersSearch] @p_id, @p_regDate, @p_fname, @p_lname, @p_sx, @p_birth, @p_phone", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
